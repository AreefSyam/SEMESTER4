# Muhammad Arif Aiman Bin Mohd Hisam
# 211981
# A* Algorithm: initial state to goal state

import heapq

class PuzzleState:
    def __init__(self, puzzle, parent=None, action=None):
        self.puzzle = puzzle
        self.parent = parent
        self.action = action
        self.cost = 0
        self.depth = 0
        if self.parent:
            self.cost = self.parent.cost + 1
            self.depth = self.parent.depth + 1

    def __lt__(self, other):
        return self.cost < other.cost

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.puzzle]) + '\n'

    @property
    def is_goal(self):
        goal = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]
        return self.puzzle == goal

    @property
    def actions(self):
        empty_row, empty_col = self.find_empty()
        actions = []
        if empty_row > 0:
            actions.append('up')
        if empty_row < 2:
            actions.append('down')
        if empty_col > 0:
            actions.append('left')
        if empty_col < 2:
            actions.append('right')
        return actions

    def find_empty(self):
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] == 0:
                    return i, j

    def result(self, action):
        empty_row, empty_col = self.find_empty()
        if action == 'up':
            new_row, new_col = empty_row - 1, empty_col
        elif action == 'down':
            new_row, new_col = empty_row + 1, empty_col
        elif action == 'left':
            new_row, new_col = empty_row, empty_col - 1
        elif action == 'right':
            new_row, new_col = empty_row, empty_col + 1
        else:
            return None

        new_puzzle = [row[:] for row in self.puzzle]
        new_puzzle[empty_row][empty_col] = new_puzzle[new_row][new_col]
        new_puzzle[new_row][new_col] = 0
        return PuzzleState(new_puzzle, parent=self, action=action)


def manhattan_distance(puzzle):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = puzzle[i][j]
            if value != 0:
                goal_row = (value - 1) // 3
                goal_col = (value - 1) % 3
                distance += abs(i - goal_row) + abs(j - goal_col)
    return distance


def solve(puzzle):
    initial_state = PuzzleState(puzzle)
    frontier = []
    heapq.heappush(frontier, initial_state)
    explored = set()

    while frontier:
        state = heapq.heappop(frontier)
        if state.is_goal:
            return state

        explored.add(str(state))

        for action in state.actions:
            child = state.result(action)
            if str(child) not in explored:
                heapq.heappush(frontier, child)

    return None


if __name__ == '__main__':
    initial_puzzle = [[3, 2, 4], [5, 0, 8], [7, 6, 1]]
    solution = solve(initial_puzzle)

    if solution:
        path = []
        current_state = solution
        while current_state:
            path.append(current_state)
            current_state = current_state.parent

        path.reverse()

        print("Solution Path:")
        for i, state in enumerate(path):
            print(f"Step {i}:")
            print(state)

        print("Goal state reached!")
    else:
        print("No solution found.")
       